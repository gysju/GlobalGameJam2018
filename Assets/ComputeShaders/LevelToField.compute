#pragma kernel LevelToField

struct Node
{
    float2 center;
    float radius;
    float4 color;
};

struct Link
{
    float2 p0;
    float2 p1;
    float focus;
};


RWTexture2D<float4> Result;
StructuredBuffer<Node> Nodes;
StructuredBuffer<Link> Links;
Texture2D<float1> Noise;
SamplerState _LinearRepeat;

//Mesh informations
float3 CornerLD;
float3 CornerRD;
float3 CornerRU;
float3 CornerLU;

//Player informations
float4 PlayerPosition;
float4 PlayerColor;

//Parameters
float BlendingFactor;
float LinkSize;
float CutThreshold;
float4 NormalRemap;
float Time;
float4 NoiseParameters;


float CircleDistance(float2 center, float radius, float2 sample)
{
    return distance(center, sample) - radius;
}

float sminPolynomial(float a, float b, float k)
{
    float h = clamp(0.5 + 0.5 * (b - a) / k, 0.0, 1.0);
    return lerp(b, a, h) - k * h * (1.0 - h);
}

float sminPower(float a, float b, float k)
{
    a = pow(a, k);
    b = pow(b, k);
    return pow((a * b) / (a + b), 1.0 / k);
}

float smin(float a, float b, float k)
{
    float res = exp(-k * a) + exp(-k * b);
    return -log(res) / k;
}

[numthreads(32,32,1)]
void LevelToField(uint3 id : SV_DispatchThreadID)
{
    //Init variables
    uint count, strides;
    uint nCount, nStrides;
    uint lCount, lStrides;
    Result.GetDimensions(count, strides);
    Nodes.GetDimensions(nCount, nStrides);
    Links.GetDimensions(lCount, lStrides);
    float2 uv = id.xy / (float2)count;
    float2 worldPos = lerp(lerp(CornerLD, CornerRD, uv.x), lerp(CornerLU, CornerRU, uv.x), uv.y).xy;
    float4 color = float4(0,0,0,0);

    //Aggregate nodes
    float aggregate = 1;
    for (uint a = 0; a < nCount; ++a)
    {
        float dist = CircleDistance(Nodes[a].center, Nodes[a].radius, worldPos);
        if (dist * 0.5 > Nodes[a].radius)
            continue;
        color += saturate(1-(dist*0.3)) * Nodes[a].color;
        aggregate = sminPolynomial(aggregate, dist, BlendingFactor);
    }

    //Aggregate links
    for (uint b = 0; b < lCount; ++b)
    {
        float len = distance(Links[b].p0, Links[b].p1);
        float invLen = 1.0 / len;
        for (float j = 0; j < len; j += 0.5)
        {
            float t = j * invLen;
            float dist = CircleDistance(lerp(Links[b].p0, Links[b].p1, t), LinkSize, worldPos);
            if (dist > 1.5)
                continue;

			//color += saturate(1 - (dist * 0.3)) * Links[b].focus * float4(10, 0, 0, 0);
			color = lerp(lerp(color, Nodes[a].color, saturate(1 - (dist*0.3))*0.55), color + saturate(1 - (dist*0.3)) * Nodes[a].color, 1-Nodes[a].color.a);

            dist *= dist;
            aggregate = sminPolynomial(aggregate, dist, BlendingFactor);
        }
    }

    //Aggregate player
    float dist = CircleDistance(PlayerPosition.xy, PlayerPosition.w, worldPos);
    color = lerp(color, PlayerColor, saturate(1 - dist)*0.55);
    aggregate = sminPolynomial(aggregate, dist, BlendingFactor);

    //Aggrgate noise
    float noise = Noise.SampleLevel(_LinearRepeat, worldPos * NoiseParameters.y + NoiseParameters.zw * Time, 0).r - .5;
    //aggregate = sminPolynomial(aggregate, noise * NoiseParameters.x, BlendingFactor);
    aggregate += noise * NoiseParameters.x;

    Result[id.xy] = float4(color.rgb, (aggregate - 1) * -NormalRemap.w);
}




#pragma kernel FieldToNormal
Texture2D<float4> SourceField;
RWTexture2D<float4> Normal;

float mathLinear(float edge0, float edge1, float x)
{
	// Scale, bias and saturate x to 0..1 range
	x = clamp((x - edge0) / (edge1 - edge0), 0.0f, 1.0f);
	return x;
}


[numthreads(32, 32, 1)]
void FieldToNormal(uint3 id : SV_DispatchThreadID)
{
	const float halfPI = 1.5707963267948966192313216916398;

    float factor = sin(mathLinear(NormalRemap.x, NormalRemap.y, SourceField[id.xy].a) * halfPI);

	float smoothness = 0.1f;

    float cut = smoothstep(CutThreshold- smoothness, CutThreshold + smoothness, SourceField[id.xy].a);

    float height = factor;
    float right = sin(mathLinear(NormalRemap.x, NormalRemap.y, SourceField[int2(id.x + 1, id.y)].a)*halfPI);
    float up = sin(mathLinear(NormalRemap.x, NormalRemap.y, SourceField[int2(id.x, id.y + 1)].a)*halfPI);
    float depth = 1;

	float normX = (height - right) * NormalRemap.z;
    float normY = (height - up) * NormalRemap.z;
	depth = sqrt(1 - normX*normX - normY * normY);

    float3 normal = float3(saturate(normX+.5), saturate(normY+.5), saturate(depth+.5));
    Normal[id.xy] = float4(normal, cut);

}
