#pragma kernel CSMain

Texture2D<float4> src;
RWTexture2D<float4> dst;
StructuredBuffer<float4> spheres;

//Camera parameters
float4 _ViewLU;
float4 _ViewRU;
float4 _ViewLD;
float4 _ViewRD;
float4 _Utils;
float4 _CameraPos;


struct Ray
{
    float3 origin;
    float3 direction;
};

struct Plane
{
    float3 origin;
    float3 normal;
};

Ray GetViewDirection(uint3 id)
{
    float sizeX, sizeY;
    src.GetDimensions(sizeX, sizeY);
    float2 uv = float2(id.x / sizeX, id.y / sizeY);
    float3 camForward = normalize((_ViewLD + _ViewLU + _ViewRD + _ViewRU) * 0.25).xyz;
    float3 forward = normalize(lerp(lerp(_ViewLD, _ViewLU, uv.y), lerp(_ViewRD, _ViewRU, uv.y), uv.x).xyz);
    Ray ray;
    ray.origin = _CameraPos.xyz;
    ray.direction = forward;
	return ray;
}

float DistanceToSphere(Ray ray, float3 center, float size)
{
    float3 L = center - ray.origin;
    float tca = dot(L, ray.direction);
				
    float d2 = dot(L, L) - tca * tca;
    float thc = sqrt(size - d2);
    float t0 = tca - thc;
    float t1 = tca + thc;
    return t1;
}

float DistanceToPlane(Ray ray, Plane plane)
{
    float denom = dot(plane.normal, ray.direction);
    float3 p0l0 = plane.origin - ray.origin;
    return dot(p0l0, plane.normal) / denom;
};

float sminPolynomial(float a, float b, float k)
{
    float h = clamp(0.5 + 0.5 * (b - a) / k, 0.0, 1.0);
    return lerp(b, a, h) - k * h * (1.0 - h);
}

float sminPower(float a, float b, float k)
{
    a = pow(a, k);
    b = pow(b, k);
    return pow((a * b) / (a + b), 1.0 / k);
}

float smin(float a, float b, float k)
{
    float res = exp(-k * a) + exp(-k * b);
    return -log(res) / k;
}

[numthreads(8,8,1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    Ray viewDir = GetViewDirection(id);
    float3 camForward = normalize((_ViewLD + _ViewLU + _ViewRD + _ViewRU) * 0.25).xyz;
    Plane projectPlane;
    projectPlane.origin = float3(0, 0, 0);
    projectPlane.normal = camForward;
    viewDir.origin += viewDir.direction * DistanceToPlane(viewDir, projectPlane);
    viewDir.direction = camForward;

    float4 color = src[id.xy];
    uint spheresCount, spheresStride;
    spheres.GetDimensions(spheresCount, spheresStride);
	
    float aggregate = 1;
    for (uint i = 0; i < spheresCount; ++i)
    {
        float dist = DistanceToSphere(viewDir, spheres[i].xyz, spheres[i].w);
        dist = max(dist, 0);
        dist = 1-saturate(dist * 0.1);
        aggregate = smin(aggregate * _Utils.x, dist * _Utils.x, _Utils.y);
    }
	
    aggregate = (1 - saturate(aggregate)) * _Utils.z;
    aggregate = step(_Utils.w, aggregate);
    color.xyz = aggregate ;

    dst[id.xy] = color;
}
