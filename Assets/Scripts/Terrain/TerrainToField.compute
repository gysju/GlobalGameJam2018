#pragma kernel CSMain

struct Ray
{
    float3 origin;
    float3 direction;
};

struct Line
{
    float3 pointA;
    float3 pointB;
};

struct Plane
{
    float3 origin;
    float3 normal;
};

struct Node
{
    float3 center;
    float radius;
    float4 color;
};

Texture2D<float4> src;
RWTexture2D<float4> dst;
StructuredBuffer<Node> Nodes;
StructuredBuffer<Line> Lines;
float3 player;
float4 playerColor;

//Camera parameters
float4 _ViewLU;
float4 _ViewRU;
float4 _ViewLD;
float4 _ViewRD;
float4 _Utils;
float4 _CameraPos;


Ray GetViewDirection(uint3 id)
{
    float sizeX, sizeY;
    src.GetDimensions(sizeX, sizeY);
    float2 uv = float2(id.x / sizeX, id.y / sizeY);
    float3 camForward = normalize((_ViewLD + _ViewLU + _ViewRD + _ViewRU) * 0.25).xyz;
    float3 forward = normalize(lerp(lerp(_ViewLD, _ViewLU, uv.y), lerp(_ViewRD, _ViewRU, uv.y), uv.x).xyz);
    Ray ray;
    ray.origin = _CameraPos.xyz;
    ray.direction = forward;
	return ray;
}

float DistanceToSphere(Ray ray, float3 center, float size)
{
    float3 L = center - ray.origin;
    float tca = dot(L, ray.direction);
				
    float d2 = dot(L, L) - tca * tca;
    float thc = sqrt(size - d2);
    float t0 = tca - thc;
    float t1 = tca + thc;
    return t1;
}

float DistanceToPlane(Ray ray, Plane plane)
{
    float denom = dot(plane.normal, ray.direction);
    float3 p0l0 = plane.origin - ray.origin;
    return dot(p0l0, plane.normal) / denom;
}

float DistanceToLine(Ray ray, Line aze)
{
    Line view;
    view.pointA = ray.origin;
    view.pointB = ray.origin + ray.direction * 100;

    float3 a = view.pointB - view.pointA;
    float3 b = aze.pointB - aze.pointA;
    float3 c = aze.pointA - view.pointA;

    return max(c*a*b, 0) / max(a*b, 0);
}

float sminPolynomial(float a, float b, float k)
{
    float h = clamp(0.5 + 0.5 * (b - a) / k, 0.0, 1.0);
    return lerp(b, a, h) - k * h * (1.0 - h);
}

float sminPower(float a, float b, float k)
{
    a = pow(a, k);
    b = pow(b, k);
    return pow((a * b) / (a + b), 1.0 / k);
}

float smin(float a, float b, float k)
{
    float res = exp(-k * a) + exp(-k * b);
    return -log(res) / k;
}

[numthreads(8,8,1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
	//Init, compute viewRay, center plane, get arrays dimensions
    Ray viewDir = GetViewDirection(id);
    float3 camForward = normalize((_ViewLD + _ViewLU + _ViewRD + _ViewRU) * 0.25).xyz;
    Plane projectPlane;
    projectPlane.origin = float3(0, 0, 0);
    projectPlane.normal = float3(0, 0, 1);
    viewDir.origin += viewDir.direction * DistanceToPlane(viewDir, projectPlane);
    viewDir.direction = projectPlane.normal;

    float4 color = src[id.xy];
    float4 nodeColor = float4(0,0,0,0);
    uint spheresCount, spheresStride, linesCount, linesStride;
    Nodes.GetDimensions(spheresCount, spheresStride);
    Lines.GetDimensions(linesCount, linesStride);
	
	//Aggregate nodes
    float aggregate = 1;
    for (uint i = 0; i < spheresCount; ++i)
    {
        float dist = DistanceToSphere(viewDir, Nodes[i].center, Nodes[i].radius);
		dist = max(dist, 0);
		dist = 1-saturate(dist * 0.1);
        float colorFactor = aggregate;
		aggregate = smin(aggregate, dist, _Utils.x);
        colorFactor = max(colorFactor - aggregate, 0);
        nodeColor += Nodes[i].color * colorFactor;
    }

	//Aggregate player
    float playerDist = DistanceToSphere(viewDir, player, 10);
    playerDist = max(playerDist, 0);
    playerDist = 1 - saturate(playerDist * 0.1);
    float playerFactor = aggregate;
    aggregate = smin(aggregate, playerDist, _Utils.x);
    playerFactor = max(playerFactor - aggregate, 0);
    nodeColor += playerColor * playerFactor;

	//Aggregate lines
    for (uint i = 0; i < linesCount; ++i)
    {
        float len = distance(Lines[i].pointA, Lines[i].pointB);
        float invLen = 1 / len;
        for (float j = 0; j < len; j += 0.5)
        {
            float dist = DistanceToSphere(viewDir, lerp(Lines[i].pointA, Lines[i].pointB, j * invLen), 2);
            dist = max(dist, 0);
            dist = 1 - saturate(dist * 0.1);
            dist *= dist;
            aggregate = smin(aggregate, dist, _Utils.y);
        }
    }
	
    aggregate = (1 - saturate(aggregate)) * _Utils.z;
    float cut = step(_Utils.w, aggregate);
    color.rgb = lerp(color.xyz, aggregate * 0.2, cut);
    color.rgb += nodeColor * cut;

    dst[id.xy] = color;
}
